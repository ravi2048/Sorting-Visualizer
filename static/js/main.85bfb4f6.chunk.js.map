{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/heapSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/insertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animation_array","length","tempArray","slice","mergesort","mainArray","s","e","mid","Math","floor","k","i","j","push","merge","getQuickSortAnimations","n","quick_sort","partition_idx","low","high","rndm","min","max","random","pivot","p_idx","partition","partition_r","heapify","idx","left_child_idx","right_child_idx","largest_node_idx","screen_width","window","screen","width","screen_height","height","bar_width","SortingVisualizer","props","state","this","resetArray","mergeSort","quickSort","heapSort","insertionSort","bubbleSort","document","getElementById","style","backgroundColor","position","x","setState","animation_healper","getHeapSortAnimations","b","getBubbleSortAnimations","key","getInsertionSortAnimations","className","map","value","margin","id","onClick","React","Component","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.85bfb4f6.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) \r\n{\r\n    const animation_array = [];\r\n    if (array.length <= 1) \r\n        return array;\r\n    const tempArray = array.slice();   //copying array into temp_array\r\n    mergesort(array, 0, array.length-1, tempArray, animation_array);\r\n    return animation_array;\r\n}\r\n  \r\n  function mergesort(mainArray,s,e,tempArray, animation_array) \r\n  {\r\n    if (s >= e) \r\n        return;\r\n    const mid = Math.floor((s+e) / 2);\r\n    mergesort(tempArray, s, mid, mainArray, animation_array);\r\n    mergesort(tempArray, mid + 1, e, mainArray, animation_array);\r\n    merge(mainArray, s, mid, e, tempArray, animation_array);\r\n  }\r\n  \r\n  function merge(mainArray, s, mid, e, tempArray,animation_array) \r\n  {\r\n    let k = s;\r\n    let i = s;\r\n    let j = mid + 1;\r\n    while (i <= mid && j <= e) \r\n    {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animation_array.push([i, j]);\r\n      // These are the values that we're comparing; pushing them again to get their previous color.\r\n      animation_array.push([i, j]);\r\n      if (tempArray[i] <= tempArray[j]) \r\n      {\r\n        animation_array.push([k, tempArray[i]]);\r\n        mainArray[k] = tempArray[i];   //overwriting the correct value at index\r\n        k++;\r\n        i++;\r\n      } \r\n      else \r\n      {\r\n        animation_array.push([k, tempArray[j]]);\r\n        mainArray[k] = tempArray[j];\r\n        k++;\r\n        j++;\r\n      }\r\n    }\r\n    while (i <= mid) \r\n    {\r\n      animation_array.push([i, i]);\r\n      animation_array.push([i, i]);\r\n      animation_array.push([k, tempArray[i]]);\r\n      mainArray[k++] = tempArray[i++];\r\n    }\r\n    while (j <= e) \r\n    {\r\n      animation_array.push([j, j]);\r\n      animation_array.push([j, j]);\r\n      animation_array.push([k, tempArray[j]]);\r\n      mainArray[k++] = tempArray[j++];\r\n    }\r\n  }","\r\nexport function getQuickSortAnimations(array)\r\n{\r\n    let n = array.length;\r\n    if (n <= 1) \r\n        return array;\r\n    const animation_array = [];\r\n    quick_sort(array, 0, n-1, animation_array);\r\n    return animation_array;\r\n}\r\n\r\nfunction quick_sort(array, s, e, animation_array)\r\n{\r\n    if(s>=e)\r\n        return;\r\n    let partition_idx = partition_r(array,s,e,animation_array);\r\n    quick_sort(array, s, partition_idx-1, animation_array);\r\n    quick_sort(array, partition_idx+1, e, animation_array);\r\n}\r\n// randomized quick sorting\r\nfunction partition_r(array, low, high, animation_array) \r\n{ \r\n    // Generate a random number in between \r\n    // low .. high \r\n    let rndm = randomIntFromInterval(low, high);\r\n  \r\n    // Swap A[random] with A[high] \r\n    [array[rndm], array[high]] = [array[high], array[rndm]];\r\n  \r\n    return partition(array, low, high,animation_array); \r\n}\r\nfunction partition(array, s, e, animation_array)\r\n{\r\n    let pivot = array[e];\r\n    let p_idx = s;\r\n    for(let i=s;i<=(e-1);i++)\r\n    {\r\n        if(array[i]<=pivot)\r\n        {\r\n            animation_array.push([i,p_idx]);\r\n            animation_array.push([i,p_idx]);\r\n            animation_array.push([i,array[p_idx]]);\r\n            //swap\r\n            [array[i], array[p_idx]] = [array[p_idx], array[i]];  \r\n\r\n            animation_array.push([i,p_idx]);\r\n            animation_array.push([i,p_idx]);\r\n            animation_array.push([p_idx,array[p_idx]]);                 \r\n            p_idx++;\r\n        }\r\n        else{\r\n            animation_array.push([i,i]);\r\n            animation_array.push([i,i]);\r\n            animation_array.push([i,array[i]]);  \r\n        }\r\n    }\r\n    animation_array.push([p_idx,e]);\r\n    animation_array.push([p_idx,e]);\r\n    animation_array.push([p_idx,array[e]]);\r\n\r\n    [array[p_idx], array[e]] = [array[e], array[p_idx]];\r\n\r\n    animation_array.push([e,e]);\r\n    animation_array.push([e,e]);\r\n    animation_array.push([e,array[e]]);\r\n    \r\n    return p_idx;\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) \r\n{\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","export function getHeapSortAnimations(array)\r\n{\r\n    // using max heap\r\n    let n = array.length;\r\n    const animation_array = [];\r\n    if (n <= 1) \r\n        return array;\r\n    for(let i=n/2-1;i>=0;i--)  // no need to heapify leaf nodes so the first parent node of last leaf node(at n-1) is at 2x+1 = n-1==>x =n/2-1 \r\n    {\r\n        heapify(array, n, i, animation_array);\r\n    }\r\n    for(let i=n-1;i>0;i--)\r\n    {\r\n        animation_array.push([0,i]);\r\n        animation_array.push([0,i]);\r\n        animation_array.push([i,array[0]]);\r\n\r\n        animation_array.push([0,i]);\r\n        animation_array.push([0,i]);\r\n        animation_array.push([0,array[i]]);\r\n\r\n        [array[i], array[0]] = [array[0], array[i]];\r\n\r\n        heapify(array, i, 0, animation_array);  // calling heapify for reduced array i=n-1\r\n    }\r\n    return animation_array;\r\n}\r\n\r\nfunction heapify(array, n, idx, animation_array)\r\n{\r\n    let left_child_idx = 2*idx+1;\r\n    let right_child_idx = 2*idx+2;\r\n    let largest_node_idx = idx;\r\n\r\n    if(left_child_idx < n && array[left_child_idx] > array[largest_node_idx])\r\n        largest_node_idx = left_child_idx;\r\n\r\n    if(right_child_idx < n && array[right_child_idx] > array[largest_node_idx])\r\n        largest_node_idx = right_child_idx;\r\n    \r\n    if(largest_node_idx !== idx)\r\n    {\r\n        [array[largest_node_idx], array[idx]] = [array[idx], array[largest_node_idx]];\r\n        heapify(array, n, largest_node_idx, animation_array);\r\n    }\r\n}","\r\nimport React from 'react';\r\n\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/mergeSort.js';\r\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/bubbleSort.js';\r\nimport {getQuickSortAnimations} from '../sortingAlgorithms/quickSort.js';\r\nimport {getHeapSortAnimations} from '../sortingAlgorithms/heapSort.js';\r\nimport {getInsertionSortAnimations} from '../sortingAlgorithms/insertionSort.js';\r\n\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 150;\r\n\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nvar screen_width =   window.screen.width;\r\nvar screen_height =  window.screen.height;\r\n\r\n\r\n// var onresize = function() {\r\n//   screen_width = window.screen.width;\r\n//   screen_height = window.screen.height;\r\n// }\r\n// window.addEventListener(\"resize\", onresize);\r\n\r\n\r\n// getting proper bar width for responsive look\r\nconst bar_width = screen_width*0.65/NUMBER_OF_ARRAY_BARS;\r\n\r\n\r\nexport default class SortingVisualizer extends React.Component \r\n{\r\n  constructor(props) \r\n  {\r\n    super(props);\r\n    this.state = { array: []};\r\n  }\r\n\r\n  componentDidMount() \r\n  {\r\n    this.resetArray();\r\n    this.mergeSort();\r\n    this.quickSort();\r\n    this.heapSort();\r\n    this.insertionSort();\r\n    this.bubbleSort();\r\n  }\r\n \r\n\r\n  resetArray() \r\n  {\r\n    document.getElementById(\"i1\").style.backgroundColor = \"turquoise\";\r\n    document.getElementById(\"i1\").position=\"absolute\";\r\n    const array = [];\r\n    const x = screen_height;\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) \r\n    {\r\n      array.push(randomIntFromInterval(5, x*0.58));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  mergeSort() \r\n  {\r\n    document.getElementById(\"i2\").style.backgroundColor = \"turquoise\";\r\n    document.getElementById(\"i2\").position=\"absolute\";\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    animation_healper(animations);\r\n  }\r\n\r\n  quickSort() \r\n  {\r\n    document.getElementById(\"i3\").style.backgroundColor = \"turquoise\";\r\n    document.getElementById(\"i3\").position=\"absolute\";\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n    animation_healper(animations);\r\n  }\r\n\r\n  heapSort() \r\n  {\r\n    document.getElementById(\"i4\").style.backgroundColor = \"turquoise\";\r\n    document.getElementById(\"i4\").position=\"absolute\";\r\n    const animations = getHeapSortAnimations(this.state.array);\r\n    animation_healper(animations);\r\n  }\r\n\r\n  bubbleSort() \r\n  {\r\n    document.getElementById(\"i5\").style.backgroundColor = \"turquoise\";\r\n    document.getElementById(\"i5\").position=\"absolute\";\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    animation_healper(animations);\r\n  }\r\n\r\n  insertionSort()\r\n  {\r\n    document.getElementById(\"i6\").style.backgroundColor = \"turquoise\";\r\n    document.getElementById(\"i6\").position=\"absolute\";\r\n      // best == O(n) avg. == O(n^2)  worst = O(n^2)\r\n    const animations = getInsertionSortAnimations(this.state.array);\r\n    animation_healper(animations);\r\n  }\r\n\r\n\r\n  render() \r\n  {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\"\r\n        style={{\r\n         \r\n            position:\"absolute\",\r\n            // right:`${bar_width*0.05*NUMBER_OF_ARRAY_BARS}px`,\r\n            // left:`${bar_width*0.01*NUMBER_OF_ARRAY_BARS}px`,\r\n        }}\r\n        >\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              position: \"relative\",\r\n              height: `${value}px`,\r\n              width: `${bar_width*0.9}px`,\r\n              margin: `${bar_width*0.1}px`,\r\n            }}></div>\r\n        ))}\r\n        <div className = \"footer\">\r\n          <button  id = \"i1\" onClick = {() => this.resetArray()}>Generate New Array</button>\r\n          <button  id = \"i2\" onClick = {() => this.mergeSort()}>Merge Sort</button>\r\n          <button  id = \"i3\" onClick = {() => this.quickSort()}>Quick Sort</button>\r\n          <button  id = \"i4\" onClick = {() => this.heapSort()}>Heap Sort</button>\r\n          <button  id = \"i5\" onClick = {() => this.bubbleSort()}>Bubble Sort</button>\r\n          <button  id = \"i6\" onClick = {() => this.insertionSort()}>Insertion Sort</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// HEALPER FUNCTIONS-------------\r\nfunction animation_healper(animation_array)\r\n{\r\n    for (let i = 0; i < animation_array.length; i++) \r\n    {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = (i%3 !== 2);\r\n      if (isColorChange) \r\n      {\r\n        const [barOneIdx, barTwoIdx] = animation_array[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(\r\n        ()=>               // arrow function is convinient bcz it makes the scoping similar to other programming languages\r\n        {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } \r\n      else \r\n      {\r\n        setTimeout( \r\n        ()=>\r\n        {\r\n          const [barOneIdx, newHeight] = animation_array[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) \r\n{\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// function get_width()\r\n// { \r\n  \r\n   \r\n//   document.documentElement.clientWidth +  \r\n                    \r\n// }\r\n// function get_height\r\n// {\r\n//   document.documentElement.clientHeight;\r\n// }\r\n\r\n","export function getBubbleSortAnimations(array)\r\n{\r\n    let n = array.length;\r\n    const animation_array = [];\r\n    if(n<=1)\r\n        return array;\r\n    let idx=0;\r\n    let b=false;\r\n\r\n    for(let j=0;j<n-1;j++)\r\n    {\r\n        if(array[j]>array[j+1])\r\n            b = true;\r\n    }\r\n    \r\n    for(let i=0;i<n-1;i++)\r\n    {\r\n        \r\n        if(b===true)  //  if already sorted then don't sort\r\n        {\r\n            for(let j=0;j<n-i-1;j++)\r\n            {\r\n                if(array[j]>array[j+1])\r\n                {\r\n                    animation_array.push([j,j+1]);\r\n                    animation_array.push([j,j+1]);\r\n                    animation_array.push([j,array[j+1]]);\r\n                    //swappping\r\n                    [array[j], array[j+1]] = [array[j+1], array[j]];\r\n                }\r\n                else{\r\n                    animation_array.push([j,j+1]);\r\n                    animation_array.push([j,j+1]);\r\n                    animation_array.push([j,array[j]]);\r\n                }\r\n            }\r\n            animation_array.push([i,i+1]);\r\n            animation_array.push([i,i+1]);\r\n            animation_array.push([n-1-i,array[n-1-i]]);\r\n\r\n        }\r\n        else\r\n        {\r\n            animation_array.push([i,i+1]);\r\n            animation_array.push([i,i+1]);\r\n            animation_array.push([n-1-i,array[n-1-i]]);\r\n        }\r\n    }\r\n    return animation_array;\r\n}","export function getInsertionSortAnimations(array)\r\n{\r\n    let n = array.length;\r\n    const animation_array = [];\r\n    if (n <= 1) \r\n        return array;\r\n    // take 1st elemt as sorted and keep compairing other lelemts to it\r\n    for(let i=1;i<n;i++)\r\n    {\r\n        let key = array[i];\r\n        let j=i-1;\r\n        while(j>=0 && array[j]>key)\r\n        {\r\n            animation_array.push([j,i]);\r\n            animation_array.push([j,i]);\r\n            animation_array.push([j+1, array[j]]);\r\n            array[j+1] = array[j];\r\n            j--;\r\n        }\r\n        animation_array.push([j+1,j+1]);\r\n        animation_array.push([j+1,j+1]);\r\n        animation_array.push([j+1,key]);\r\n        array[j+1] = key;\r\n    }\r\n    return animation_array;\r\n}","import React from 'react';\nimport './App.css';\n\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer>\n\n      </SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}