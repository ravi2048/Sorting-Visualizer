{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/heapSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/insertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animation_array","length","tempArray","slice","mergesort","mainArray","s","e","mid","Math","floor","k","i","j","push","merge","getQuickSortAnimations","arr","quick_sort","partition_idx","low","high","rndm","min","max","random","pivot","p_idx","partition","partition_r","heapify","n","idx","left_child_idx","right_child_idx","largest_node_idx","screen_width","window","screen","width","bar_width","SortingVisualizer","props","state","this","resetArray","setState","animation_healper","getHeapSortAnimations","getBubbleSortAnimations","key","getInsertionSortAnimations","className","style","position","right","left","map","value","backgroundColor","height","margin","onClick","mergeSort","quickSort","heapSort","bubbleSort","insertionSort","React","Component","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAAO,SAASA,EAAuBC,GAEnC,IAAMC,EAAkB,GACxB,GAAID,EAAME,QAAU,EAChB,OAAOF,EACX,IAAMG,EAAYH,EAAMI,QAExB,OAGF,SAASC,EAAUC,EAAUC,EAAEC,EAAEL,EAAWF,GAE1C,GAAIM,GAAKC,EACL,OACJ,IAAMC,EAAMC,KAAKC,OAAOJ,EAAEC,GAAK,GAC/BH,EAAUF,EAAWI,EAAGE,EAAKH,EAAWL,GACxCI,EAAUF,EAAWM,EAAM,EAAGD,EAAGF,EAAWL,GAI9C,SAAeK,EAAWC,EAAGE,EAAKD,EAAGL,EAAUF,GAE7C,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAM,EACd,KAAOI,GAAKJ,GAAOK,GAAKN,GAItBP,EAAgBc,KAAK,CAACF,EAAGC,IAEzBb,EAAgBc,KAAK,CAACF,EAAGC,IACrBX,EAAUU,IAAMV,EAAUW,IAE5Bb,EAAgBc,KAAK,CAACH,EAAGT,EAAUU,KACnCP,EAAUM,GAAKT,EAAUU,GACzBD,IACAC,MAIAZ,EAAgBc,KAAK,CAACH,EAAGT,EAAUW,KACnCR,EAAUM,GAAKT,EAAUW,GACzBF,IACAE,KAGJ,KAAOD,GAAKJ,GAEVR,EAAgBc,KAAK,CAACF,EAAGA,IACzBZ,EAAgBc,KAAK,CAACF,EAAGA,IACzBZ,EAAgBc,KAAK,CAACH,EAAGT,EAAUU,KACnCP,EAAUM,KAAOT,EAAUU,KAE7B,KAAOC,GAAKN,GAEVP,EAAgBc,KAAK,CAACD,EAAGA,IACzBb,EAAgBc,KAAK,CAACD,EAAGA,IACzBb,EAAgBc,KAAK,CAACH,EAAGT,EAAUW,KACnCR,EAAUM,KAAOT,EAAUW,KA1C7BE,CAAMV,EAAWC,EAAGE,EAAKD,EAAGL,EAAWF,GAXvCI,CAAUL,EAAO,EAAGA,EAAME,OAAO,EAAGC,EAAWF,GACxCA,ECHJ,SAASgB,EAAuBjB,GAEnC,IAAMkB,EAAMlB,EAAMI,QAEZH,EAAkB,GAExB,OAGJ,SAASkB,EAAWD,EAAKX,EAAGC,EAAGP,GAE3B,GAAGM,GAAGC,EACF,OACJ,IAAIY,EAKR,SAAqBF,EAAKG,EAAKC,EAAMrB,GAIjC,IAAIsB,GA+CuBC,EA/CMH,EA+CDI,EA/CMH,EAkDjCZ,KAAKC,MAAMD,KAAKgB,UAAYD,EAAMD,EAAM,GAAKA,IArDtD,EAM6B,CAACN,EAAII,GAAOJ,EAAIK,IA4C7C,IAA+BC,EAAKC,EA1ChC,OAFCP,EAAIK,GANT,KAMgBL,EAAII,GANpB,KAUA,SAAmBJ,EAAKX,EAAGC,EAAGP,GAI1B,IAFA,IAAI0B,EAAQT,EAAIV,GACZoB,EAAQrB,EACJM,EAAEN,EAAEM,GAAIL,EAAE,EAAGK,IAEjB,GAAGK,EAAIL,IAAIc,EACX,CACI1B,EAAgBc,KAAK,CAACF,EAAEe,IACxB3B,EAAgBc,KAAK,CAACF,EAAEe,IACxB3B,EAAgBc,KAAK,CAACF,EAAEK,EAAIU,KAHhC,MAK2B,CAACV,EAAIU,GAAQV,EAAIL,IAAvCK,EAAIL,GALT,KAKaK,EAAIU,GALjB,KAOI3B,EAAgBc,KAAK,CAACF,EAAEe,IACxB3B,EAAgBc,KAAK,CAACF,EAAEe,IACxB3B,EAAgBc,KAAK,CAACa,EAAMV,EAAIU,KAChCA,SAGA3B,EAAgBc,KAAK,CAACF,EAAEA,IACxBZ,EAAgBc,KAAK,CAACF,EAAEA,IACxBZ,EAAgBc,KAAK,CAACF,EAAEK,EAAIL,KAGpCZ,EAAgBc,KAAK,CAACa,EAAMpB,IAC5BP,EAAgBc,KAAK,CAACa,EAAMpB,IAC5BP,EAAgBc,KAAK,CAACa,EAAMV,EAAIV,KA1BpC,MA4B2B,CAACU,EAAIV,GAAIU,EAAIU,IAQpC,OARCV,EAAIU,GA5BT,KA4BiBV,EAAIV,GA5BrB,KA8BIP,EAAgBc,KAAK,CAACP,EAAEA,IACxBP,EAAgBc,KAAK,CAACP,EAAEA,IACxBP,EAAgBc,KAAK,CAACP,EAAEU,EAAIV,KAIrBoB,EAvCAC,CAAUX,EAAKG,EAAKC,EAAKrB,GAdZ6B,CAAYZ,EAAIX,EAAEC,EAAEP,GACxCkB,EAAWD,EAAKX,EAAGa,EAAc,EAAGnB,GACpCkB,EAAWD,EAAKE,EAAc,EAAGZ,EAAGP,GAVpCkB,CAAWD,EAAK,EAFRA,EAAIhB,OAES,EAAGD,GACjBA,ECkBX,SAAS8B,EAAQ5B,EAAW6B,EAAGC,EAAKhC,GAEhC,IAAIiC,EAAiB,EAAED,EAAI,EACvBE,EAAkB,EAAEF,EAAI,EACxBG,EAAmBH,EAMvB,GALGC,EAAiBF,GAAK7B,EAAU+B,GAAkB/B,EAAUiC,KAC3DA,EAAmBF,GACpBC,EAAkBH,GAAK7B,EAAUgC,GAAmBhC,EAAUiC,KAC7DA,EAAmBD,GAEpBC,GAAoBH,EACvB,OAIoD,CAAC9B,EAAU8B,GAAM9B,EAAUiC,IAA1EjC,EAAUiC,GAJf,KAIkCjC,EAAU8B,GAJ5C,KAQIF,EAAQ5B,EAAW6B,EAAGI,EAAkBnC,I,UCxB1CoC,EA8IQC,OAAOC,OAAOC,MA3ItBC,EAAY/B,KAAKC,MAAM0B,EAZA,KAeRK,E,kDAEnB,WAAYC,GACX,IAAD,8BACE,cAAMA,IACDC,MAAQ,CAAE5C,MAAO,IAFxB,E,gEAOE6C,KAAKC,e,mCAML,IADA,IAiH2BtB,EAAKC,EAjH1BzB,EAAQ,GACLa,EAAI,EAAGA,EA/BS,IA+BiBA,IAExCb,EAAMe,MA8GmBS,EA9GQ,EA8GHC,EA9GM,IAiHjCf,KAAKC,MAAMD,KAAKgB,UAAYD,EAAMD,EAAM,GAAKA,KA/GlDqB,KAAKE,SAAS,CAAC/C,Y,kCAMfgD,EADmBjD,EAAuB8C,KAAKD,MAAM5C,U,kCAOrDgD,EADmB/B,EAAuB4B,KAAKD,MAAM5C,U,iCAOrDgD,EDnEG,SAA+BhD,GAGlC,IAAIgC,EAAIhC,EAAME,OACRD,EAAkB,GACxB,GAAI+B,GAAK,EACL,OAAOhC,EAEX,IADA,IAAMG,EAAYH,EAAMI,QAChBS,EAAEmB,EAAE,EAAE,EAAEnB,GAAG,EAAEA,IAEjBkB,EAAQ5B,EAAW6B,EAAGnB,EAAGZ,GAE7B,IAAI,IAAIY,EAAEmB,EAAE,EAAEnB,EAAE,EAAEA,IAClB,CACIZ,EAAgBc,KAAK,CAAC,EAAEF,IACxBZ,EAAgBc,KAAK,CAAC,EAAEF,IACxBZ,EAAgBc,KAAK,CAACF,EAAEV,EAAU,KAClCF,EAAgBc,KAAK,CAAC,EAAEF,IACxBZ,EAAgBc,KAAK,CAAC,EAAEF,IACxBZ,EAAgBc,KAAK,CAAC,EAAEZ,EAAUU,KANtC,MAQmC,CAACV,EAAU,GAAIA,EAAUU,IAAvDV,EAAUU,GARf,KAQmBV,EAAU,GAR7B,KAUI4B,EAAQ5B,EAAWU,EAAG,EAAGZ,GAE7B,OAAOA,ECyCYgD,CAAsBJ,KAAKD,MAAM5C,U,mCAOpDgD,ECzEG,SAAiC9B,GAEpC,IAAIc,EAAId,EAAIhB,OACND,EAAkB,GAClBD,EAAQkB,EAAId,QAClB,KAAG4B,GAAG,GAAN,CAGA,IADA,IACQnB,EAAE,EAAEA,EAAEmB,EAAE,EAAEnB,IAClB,CACI,IAAI,IAAIC,EAAE,EAAEA,EAAEkB,EAAEnB,EAAE,EAAEC,IAEhB,GAAGd,EAAMc,GAAGd,EAAMc,EAAE,GACpB,CACIb,EAAgBc,KAAK,CAACD,EAAEA,EAAE,IAC1Bb,EAAgBc,KAAK,CAACD,EAAEA,EAAE,IAC1Bb,EAAgBc,KAAK,CAACD,EAAEd,EAAMc,EAAE,KAHpC,MAK6B,CAACd,EAAMc,EAAE,GAAId,EAAMc,IAA3Cd,EAAMc,GALX,KAKed,EAAMc,EAAE,GALvB,KAOIb,EAAgBc,KAAK,CAACD,EAAEA,EAAE,IAC1Bb,EAAgBc,KAAK,CAACD,EAAEA,EAAE,IAC1Bb,EAAgBc,KAAK,CAACD,EAAE,EAAEI,EAAIJ,EAAE,UAGhCb,EAAgBc,KAAK,CAACD,EAAEA,IACxBb,EAAgBc,KAAK,CAACD,EAAEA,IACxBb,EAAgBc,KAAK,CAACD,EAAEd,EAAMc,KAGtCb,EAAgBc,KAAK,CAACiB,EAAE,EAAEnB,EAAEmB,EAAE,EAAEnB,IAChCZ,EAAgBc,KAAK,CAACiB,EAAE,EAAEnB,EAAEmB,EAAE,EAAEnB,IAChCZ,EAAgBc,KAAK,CAACiB,EAAE,EAAEnB,EAAEb,EAAMgC,EAAE,EAAEnB,KAI1C,OAAOZ,GDoCYiD,CAAwBL,KAAKD,MAAM5C,U,+EAYtDgD,EEpFG,SAAoChD,GAEvC,IAAIgC,EAAIhC,EAAME,OACRD,EAAkB,GACxB,GAAI+B,GAAK,EACL,OAAOhC,EAGX,IAFA,IAAMkB,EAAMlB,EAAMI,QAEVS,EAAE,EAAEA,EAAEmB,EAAEnB,IAChB,CAGI,IAFA,IAAIsC,EAAMjC,EAAIL,GACVC,EAAED,EAAE,EACFC,GAAG,GAAKI,EAAIJ,GAAGqC,GAEjBlD,EAAgBc,KAAK,CAACD,EAAED,IACxBZ,EAAgBc,KAAK,CAACD,EAAED,IACxBZ,EAAgBc,KAAK,CAACD,EAAE,EAAGI,EAAIJ,KAC/BI,EAAIJ,EAAE,GAAKI,EAAIJ,GACfA,IAEJb,EAAgBc,KAAK,CAACD,EAAE,EAAEA,EAAE,IAC5Bb,EAAgBc,KAAK,CAACD,EAAE,EAAEA,EAAE,IAC5Bb,EAAgBc,KAAK,CAACD,EAAE,EAAGqC,IAC3BjC,EAAIJ,EAAE,GAAKqC,EAEf,OAAOlD,EF0DYmD,CAA2BP,KAAKD,MAAM5C,U,+BAM1D,IAAD,OACSA,EAAS6C,KAAKD,MAAd5C,MAEP,OACE,yBAAKqD,UAAU,kBACbC,MAAO,CACHC,SAAS,WACTC,MAAM,GAAD,OAAc,IAAVf,EAlFQ,IAkFZ,MAELgB,KAAK,GAAD,OAAc,IAAVhB,EApFS,IAoFb,QAGPzC,EAAM0D,KAAI,SAACC,EAAO1B,GAAR,OACT,yBACEoB,UAAU,YACVF,IAAKlB,EACLqB,MAAO,CACLM,gBAxFQ,YAyFRL,SAAU,WACVM,OAAO,GAAD,OAAKF,EAAL,MACNnB,MAAM,GAAD,OAAe,GAAVC,EAAL,MACLqB,OAAO,GAAD,OAAe,GAAVrB,EAAL,YAGZ,4BAAQsB,QAAW,kBAAM,EAAKjB,eAA9B,sBACA,4BAAQiB,QAAW,kBAAM,EAAKC,cAA9B,cACA,4BAAQD,QAAW,kBAAM,EAAKE,cAA9B,cACA,4BAAQF,QAAW,kBAAM,EAAKG,aAA9B,aACA,4BAAQH,QAAW,kBAAM,EAAKI,eAA9B,eACA,4BAAQJ,QAAW,kBAAM,EAAKK,kBAA9B,uB,GAzFuCC,IAAMC,WAgGrD,SAAStB,EAAkB/C,GAEvB,IADH,IAAD,WACaY,GAEP,IAAM0D,EAAYC,SAASC,uBAAuB,aAElD,GADuB5D,EAAE,IAAM,EAE/B,CAAC,IAAD,cACiCZ,EAAgBY,GADjD,GACS6D,EADT,KACoBC,EADpB,KAEQC,EAAcL,EAAUG,GAAWpB,MACnCuB,EAAcN,EAAUI,GAAWrB,MACnCwB,EAAQjE,EAAI,IAAM,EAnHR,MAHF,YAuHdkE,YACA,WAEEH,EAAYhB,gBAAkBkB,EAC9BD,EAAYjB,gBAAkBkB,IAlIb,EAmIhBjE,QAIHkE,YACA,WACC,IAAD,cACiC9E,EAAgBY,GADjD,GACS6D,EADT,KACoBM,EADpB,KAEsBT,EAAUG,GAAWpB,MAC7BO,OAAZ,UAAwBmB,EAAxB,QA5IiB,EA6IhBnE,IAzBEA,EAAI,EAAGA,EAAIZ,EAAgBC,OAAQW,IAC3C,EADQA,GGjHEoE,MAVf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCKc6B,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b7fbcbf.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) \r\n{\r\n    const animation_array = [];\r\n    if (array.length <= 1) \r\n        return array;\r\n    const tempArray = array.slice();   //copying array into temp_array\r\n    mergesort(array, 0, array.length-1, tempArray, animation_array);\r\n    return animation_array;\r\n}\r\n  \r\n  function mergesort(mainArray,s,e,tempArray, animation_array) \r\n  {\r\n    if (s >= e) \r\n        return;\r\n    const mid = Math.floor((s+e) / 2);\r\n    mergesort(tempArray, s, mid, mainArray, animation_array);\r\n    mergesort(tempArray, mid + 1, e, mainArray, animation_array);\r\n    merge(mainArray, s, mid, e, tempArray, animation_array);\r\n  }\r\n  \r\n  function merge(mainArray, s, mid, e, tempArray,animation_array) \r\n  {\r\n    let k = s;\r\n    let i = s;\r\n    let j = mid + 1;\r\n    while (i <= mid && j <= e) \r\n    {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animation_array.push([i, j]);\r\n      // These are the values that we're comparing; pushing them again to get their previous color.\r\n      animation_array.push([i, j]);\r\n      if (tempArray[i] <= tempArray[j]) \r\n      {\r\n        animation_array.push([k, tempArray[i]]);\r\n        mainArray[k] = tempArray[i];\r\n        k++;\r\n        i++;\r\n      } \r\n      else \r\n      {\r\n        animation_array.push([k, tempArray[j]]);\r\n        mainArray[k] = tempArray[j];\r\n        k++;\r\n        j++;\r\n      }\r\n    }\r\n    while (i <= mid) \r\n    {\r\n      animation_array.push([i, i]);\r\n      animation_array.push([i, i]);\r\n      animation_array.push([k, tempArray[i]]);\r\n      mainArray[k++] = tempArray[i++];\r\n    }\r\n    while (j <= e) \r\n    {\r\n      animation_array.push([j, j]);\r\n      animation_array.push([j, j]);\r\n      animation_array.push([k, tempArray[j]]);\r\n      mainArray[k++] = tempArray[j++];\r\n    }\r\n  }","\r\n// import {randomIntFromInterval} from '../sortingAlgorithms/healperFunctions.js';\r\n\r\n\r\nexport function getQuickSortAnimations(array)\r\n{\r\n    const arr = array.slice();\r\n    let n = arr.length;\r\n    const animation_array = [];\r\n    quick_sort(arr, 0, n-1, animation_array);\r\n    return animation_array;\r\n}\r\n\r\nfunction quick_sort(arr, s, e, animation_array)\r\n{\r\n    if(s>=e)\r\n        return;\r\n    let partition_idx = partition_r(arr,s,e,animation_array);\r\n    quick_sort(arr, s, partition_idx-1, animation_array);\r\n    quick_sort(arr, partition_idx+1, e, animation_array);\r\n}\r\n// randomized quick sorting\r\nfunction partition_r(arr, low, high, animation_array) \r\n{ \r\n    // Generate a random number in between \r\n    // low .. high \r\n    let rndm = randomIntFromInterval(low, high);\r\n  \r\n    // Swap A[random] with A[high] \r\n    [arr[rndm], arr[high]] = [arr[high], arr[rndm]];\r\n  \r\n    return partition(arr, low, high,animation_array); \r\n}\r\nfunction partition(arr, s, e, animation_array)\r\n{\r\n    let pivot = arr[e];\r\n    let p_idx = s;\r\n    for(let i=s;i<=(e-1);i++)\r\n    {\r\n        if(arr[i]<=pivot)\r\n        {\r\n            animation_array.push([i,p_idx]);\r\n            animation_array.push([i,p_idx]);\r\n            animation_array.push([i,arr[p_idx]]);\r\n            //swap\r\n            [arr[i], arr[p_idx]] = [arr[p_idx], arr[i]];  \r\n\r\n            animation_array.push([i,p_idx]);\r\n            animation_array.push([i,p_idx]);\r\n            animation_array.push([p_idx,arr[p_idx]]);                 \r\n            p_idx++;\r\n        }\r\n        else{\r\n            animation_array.push([i,i]);\r\n            animation_array.push([i,i]);\r\n            animation_array.push([i,arr[i]]);  \r\n        }\r\n    }\r\n    animation_array.push([p_idx,e]);\r\n    animation_array.push([p_idx,e]);\r\n    animation_array.push([p_idx,arr[e]]);\r\n\r\n    [arr[p_idx], arr[e]] = [arr[e], arr[p_idx]];\r\n\r\n    animation_array.push([e,e]);\r\n    animation_array.push([e,e]);\r\n    animation_array.push([e,arr[e]]);\r\n    \r\n    \r\n\r\n    return p_idx;\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) \r\n{\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","export function getHeapSortAnimations(array)\r\n{\r\n    // using max heap\r\n    let n = array.length;\r\n    const animation_array = [];\r\n    if (n <= 1) \r\n        return array;\r\n    const tempArray = array.slice();   //copying array into temp_array\r\n    for(let i=n/2-1;i>=0;i--)\r\n    {\r\n        heapify(tempArray, n, i, animation_array);\r\n    }\r\n    for(let i=n-1;i>0;i--)\r\n    {\r\n        animation_array.push([0,i]);\r\n        animation_array.push([0,i]);\r\n        animation_array.push([i,tempArray[0]]);\r\n        animation_array.push([0,i]);\r\n        animation_array.push([0,i]);\r\n        animation_array.push([0,tempArray[i]]);\r\n\r\n        [tempArray[i], tempArray[0]] = [tempArray[0], tempArray[i]];\r\n\r\n        heapify(tempArray, i, 0, animation_array);  // calling heapify for reduced array i=n-1\r\n    }\r\n    return animation_array;\r\n}\r\n\r\nfunction heapify(tempArray, n, idx, animation_array)\r\n{\r\n    let left_child_idx = 2*idx+1;\r\n    let right_child_idx = 2*idx+2;\r\n    let largest_node_idx = idx;\r\n    if(left_child_idx < n && tempArray[left_child_idx] > tempArray[largest_node_idx])\r\n        largest_node_idx = left_child_idx;\r\n    if(right_child_idx < n && tempArray[right_child_idx] > tempArray[largest_node_idx])\r\n        largest_node_idx = right_child_idx;\r\n    \r\n    if(largest_node_idx != idx)\r\n    {\r\n        // animation_array.push([largest_node_idx,idx]);\r\n        // animation_array.push([largest_node_idx,idx]);\r\n        // animation_array.push([largest_node_idx,tempArray[idx]]);\r\n        [tempArray[largest_node_idx], tempArray[idx]] = [tempArray[idx], tempArray[largest_node_idx]];\r\n        // animation_array.push([idx,idx]);\r\n        // animation_array.push([idx,idx]);\r\n        // animation_array.push([idx,tempArray[largest_node_idx]]);\r\n        heapify(tempArray, n, largest_node_idx, animation_array);\r\n    }\r\n    // else{\r\n    //     animation_array.push([idx,idx]);\r\n    //     animation_array.push([idx,idx]);\r\n    //     animation_array.push([idx,tempArray[idx]]);\r\n    // }\r\n}","\r\nimport React from 'react';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/mergeSort.js';\r\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/bubbleSort.js';\r\nimport {getQuickSortAnimations} from '../sortingAlgorithms/quickSort.js';\r\nimport {getHeapSortAnimations} from '../sortingAlgorithms/heapSort.js';\r\nimport {getInsertionSortAnimations} from '../sortingAlgorithms/insertionSort.js';\r\n\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 150;\r\n\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nconst screen_width =  getscreenwidth();\r\n\r\n// getting proper bar width for responsive look\r\nconst bar_width = Math.floor(screen_width/NUMBER_OF_ARRAY_BARS);\r\n\r\n\r\nexport default class SortingVisualizer extends React.Component \r\n{\r\n  constructor(props) \r\n  {\r\n    super(props);\r\n    this.state = { array: []};\r\n  }\r\n\r\n  componentDidMount() \r\n  {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() \r\n  {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) \r\n    {\r\n      array.push(randomIntFromInterval(5, 500));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  mergeSort() \r\n  {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    animation_healper(animations);\r\n  }\r\n\r\n  quickSort() \r\n  {\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n    animation_healper(animations);\r\n  }\r\n\r\n  heapSort() \r\n  {\r\n    const animations = getHeapSortAnimations(this.state.array);\r\n    animation_healper(animations);\r\n  }\r\n\r\n  bubbleSort() \r\n  {\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    animation_healper(animations);\r\n  }\r\n  selectionSort()\r\n  {\r\n\r\n  }\r\n\r\n  insertionSort()\r\n  {\r\n      // best == O(n) avg. == O(n^2)  worst = O(n^2)\r\n    const animations = getInsertionSortAnimations(this.state.array);\r\n    animation_healper(animations);\r\n  }\r\n\r\n\r\n  render() \r\n  {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\"\r\n        style={{\r\n            position:\"absolute\",\r\n            right:`${bar_width*0.05*NUMBER_OF_ARRAY_BARS}px`,\r\n\r\n            left:`${bar_width*0.05*NUMBER_OF_ARRAY_BARS}px`,\r\n        }}\r\n        >\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              position: \"relative\",\r\n              height: `${value}px`,\r\n              width: `${bar_width*0.5}px`,\r\n              margin: `${bar_width*0.1}px`,\r\n            }}></div>\r\n        ))}\r\n        <button onClick = {() => this.resetArray()}>Generate New Array</button>\r\n        <button onClick = {() => this.mergeSort()}>Merge Sort</button>\r\n        <button onClick = {() => this.quickSort()}>Quick Sort</button>\r\n        <button onClick = {() => this.heapSort()}>Heap Sort</button>\r\n        <button onClick = {() => this.bubbleSort()}>Bubble Sort</button>\r\n        <button onClick = {() => this.insertionSort()}>Insertion Sort</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// HEALPER FUNCTIONS-------------\r\nfunction animation_healper(animation_array)\r\n{\r\n    for (let i = 0; i < animation_array.length; i++) \r\n    {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = (i%3 !== 2);\r\n      if (isColorChange) \r\n      {\r\n        const [barOneIdx, barTwoIdx] = animation_array[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(\r\n        function()\r\n        {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } \r\n      else \r\n      {\r\n        setTimeout( \r\n        function()\r\n        {\r\n          const [barOneIdx, newHeight] = animation_array[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) \r\n{\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction getscreenwidth()\r\n{\r\n    const w = window.screen.width;\r\n    return w;\r\n}\r\n","export function getBubbleSortAnimations(arr)\r\n{\r\n    let n = arr.length;\r\n    const animation_array = [];\r\n    const array = arr.slice();\r\n    if(n<=1)\r\n        return;\r\n    let idx=0;\r\n    for(let i=0;i<n-1;i++)\r\n    {\r\n        for(let j=0;j<n-i-1;j++)\r\n        {\r\n            if(array[j]>array[j+1])\r\n            {\r\n                animation_array.push([j,j+1]);\r\n                animation_array.push([j,j+1]);\r\n                animation_array.push([j,array[j+1]]);\r\n                //swappping\r\n                [array[j], array[j+1]] = [array[j+1], array[j]];\r\n\r\n                animation_array.push([j,j+1]);\r\n                animation_array.push([j,j+1]);\r\n                animation_array.push([j+1,arr[j+1]]);\r\n            }\r\n            else{\r\n                animation_array.push([j,j]);\r\n                animation_array.push([j,j]);\r\n                animation_array.push([j,array[j]]);\r\n            }\r\n        }\r\n        animation_array.push([n-1-i,n-1-i]);\r\n        animation_array.push([n-1-i,n-1-i]);\r\n        animation_array.push([n-1-i,array[n-1-i]]);\r\n    }\r\n\r\n\r\n    return animation_array;\r\n}","export function getInsertionSortAnimations(array)\r\n{\r\n    let n = array.length;\r\n    const animation_array = [];\r\n    if (n <= 1) \r\n        return array;\r\n    const arr = array.slice(); \r\n    // take 1st elemt as sorted and keep compairing other lelemts to it\r\n    for(let i=1;i<n;i++)\r\n    {\r\n        let key = arr[i];\r\n        let j=i-1;\r\n        while(j>=0 && arr[j]>key)\r\n        {\r\n            animation_array.push([j,i]);\r\n            animation_array.push([j,i]);\r\n            animation_array.push([j+1, arr[j]]);\r\n            arr[j+1] = arr[j];\r\n            j--;\r\n        }\r\n        animation_array.push([j+1,j+1]);\r\n        animation_array.push([j+1,j+1]);\r\n        animation_array.push([j+1, key]);\r\n        arr[j+1] = key;\r\n    }\r\n    return animation_array;\r\n}","import React from 'react';\nimport './App.css';\n\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer>\n\n      </SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}